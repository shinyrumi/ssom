# 환경 파악 & 버전 대응 체크리스트

## 1. 초기 환경 점검
- `package.json`, `tsconfig`, `next.config.js` 등 주요 설정 파일을 읽고 프레임워크/라이브러리 버전을 기록합니다.
- 런타임 제약(Edge/Serverless/브라우저), 네트워크 가능 여부, 보안 정책을 요약하여 작업 노트 혹은 커밋 메시지에 남깁니다.
- Supabase 프로젝트 설정과 RLS 정책 존재 여부를 확인하고, 미정이면 TODO로 명시합니다.

## 2. 버전 차이 분석
- 확인된 버전에 대한 릴리스 노트나 마이그레이션 가이드를 빠르게 검토하고, 변경된 API/헬퍼/타입을 목록화합니다.
- 기존 경험치나 예전 버전 예제를 그대로 적용하지 말고, 최신 권장안을 우선 참조합니다.
- Breaking change 가능성이 있는 부분은 PR/커밋 설명에 "버전 대응" 항목으로 따로 기재합니다.

## 3. 설계 시 필수 점검
- 폰트/이미지/CDN 등 외부 리소스를 사용할 경우 `next.config.js`의 도메인 허용 여부와 오프라인 전략(PWA 캐시 정책)을 선반영합니다.
- 인증·데이터 레이어는 사용 중인 Supabase SDK 버전을 기준으로 타입/비동기 패턴/Edge 호환성을 검토합니다.
- 신규 컴포넌트/서버 액션은 React 19, Next.js 15에서 권장하는 API(`useActionState`, 서버 컴포넌트의 async/await 등)를 우선 활용합니다.

## 4. 구현 중 검증
- 의미 있는 변경마다 최소 `npm run test` 또는 `npm run lint`를 실행하고, 실행 불가 시 사유와 예상 리스크를 문서화합니다.
- 제약(샌드박스, 권한 등)으로 인해 필요한 검증을 수행하지 못하면 즉시 공유하고 우회 방안을 제안합니다.

## 5. 결과 보고
- 산출물 설명에는 적용한 버전 차이 대응 사항, 예방한 경고/오류, 남은 TODO를 포함합니다.
- 추가 설정이나 확인이 필요한 지점이 있다면 담당자/역할과 함께 명확히 지목합니다.
